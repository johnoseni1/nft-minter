{
  "address": "0xbEACC92868EaacB93bFCBf521688B99334b22659",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "args",
          "type": "bytes"
        }
      ],
      "name": "base64Encode",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "description",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "imageUrl",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "animationUrl",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "tokenOfEdition",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "editionSize",
          "type": "uint256"
        }
      ],
      "name": "createMetadataEdition",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "description",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "mediaData",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "tokenOfEdition",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "editionSize",
          "type": "uint256"
        }
      ],
      "name": "createMetadataJSON",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "json",
          "type": "bytes"
        }
      ],
      "name": "encodeMetadataJSON",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "numberToString",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "imageUrl",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "animationUrl",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "tokenOfEdition",
          "type": "uint256"
        }
      ],
      "name": "tokenMediaData",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    }
  ],
  "transactionHash": "0x7ec6613b451cd709ff35542db370da8a042f90cd7ceeecb270e9c23de04cea00",
  "receipt": {
    "to": null,
    "from": "0x9444390c01Dd5b7249E53FAc31290F7dFF53450D",
    "contractAddress": "0xbEACC92868EaacB93bFCBf521688B99334b22659",
    "transactionIndex": 1,
    "gasUsed": "750308",
    "logsBloom": "0x
    "blockHash": "0x7609299ff47085b145292aad505feb30119d2f5dd5d419c89733817faf7a1b88",
    "transactionHash": "0x7ec6613b451cd709ff35542db370da8a042f90cd7ceeecb270e9c23de04cea00",
    "logs": [
      {
        "transactionIndex": 1,
        "blockNumber": 18965054,
        "transactionHash": "0x7ec6613b451cd709ff35542db370da8a042f90cd7ceeecb270e9c23de04cea00",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x0000000000000000000000009444390c01dd5b7249e53fac31290f7dff53450d",
          "0x000000000000000000000000c26880a0af2ea0c7e8130e6ec47af756465452e8"
        ],
        "data": "0x000000000000000000000000000000000000000000000000001553358e7f4000000000000000000000000000000000000000000000000000022d12ea67be300000000000000000000000000000000000000000000000016920a7bd3defb042b60000000000000000000000000000000000000000000000000217bfb4d93ef00000000000000000000000000000000000000000000000016920bd10737e2f82b6",
        "logIndex": 5,
        "blockHash": "0x7609299ff47085b145292aad505feb30119d2f5dd5d419c89733817faf7a1b88"
      }
    ],
    "blockNumber": 18965054,
    "cumulativeGasUsed": "885359",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "6f1fe1a2efe11809b5e940c5e33f4914",
  "metadata": "{\"compiler\":{\"version\":\"0.8.6+commit.11564f7e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"args\",\"type\":\"bytes\"}],\"name\":\"base64Encode\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"imageUrl\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"animationUrl\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"tokenOfEdition\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"editionSize\",\"type\":\"uint256\"}],\"name\":\"createMetadataEdition\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"mediaData\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"tokenOfEdition\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"editionSize\",\"type\":\"uint256\"}],\"name\":\"createMetadataJSON\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"json\",\"type\":\"bytes\"}],\"name\":\"encodeMetadataJSON\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"numberToString\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"imageUrl\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"animationUrl\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"tokenOfEdition\",\"type\":\"uint256\"}],\"name\":\"tokenMediaData\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/SharedNFTLogic.sol\":\"SharedNFTLogic\"},\"evmVersion\":\"berlin\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":100},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x391d3ba97ab6856a16b225d6ee29617ad15ff00db70f3b4df1ab5ea33aa47c9d\",\"license\":\"MIT\"},\"base64-sol/base64.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n/// @title Base64\\n/// @author Brecht Devos - <brecht@loopring.org>\\n/// @notice Provides a function for encoding some bytes in base64\\nlibrary Base64 {\\n    string internal constant TABLE = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';\\n\\n    function encode(bytes memory data) internal pure returns (string memory) {\\n        if (data.length == 0) return '';\\n        \\n        // load the table into memory\\n        string memory table = TABLE;\\n\\n        // multiply by 4/3 rounded up\\n        uint256 encodedLen = 4 * ((data.length + 2) / 3);\\n\\n        // add some extra buffer at the end required for the writing\\n        string memory result = new string(encodedLen + 32);\\n\\n        assembly {\\n            // set the actual output length\\n            mstore(result, encodedLen)\\n            \\n            // prepare the lookup table\\n            let tablePtr := add(table, 1)\\n            \\n            // input ptr\\n            let dataPtr := data\\n            let endPtr := add(dataPtr, mload(data))\\n            \\n            // result ptr, jump over length\\n            let resultPtr := add(result, 32)\\n            \\n            // run over the input, 3 bytes at a time\\n            for {} lt(dataPtr, endPtr) {}\\n            {\\n               dataPtr := add(dataPtr, 3)\\n               \\n               // read 3 bytes\\n               let input := mload(dataPtr)\\n               \\n               // write 4 characters\\n               mstore(resultPtr, shl(248, mload(add(tablePtr, and(shr(18, input), 0x3F)))))\\n               resultPtr := add(resultPtr, 1)\\n               mstore(resultPtr, shl(248, mload(add(tablePtr, and(shr(12, input), 0x3F)))))\\n               resultPtr := add(resultPtr, 1)\\n               mstore(resultPtr, shl(248, mload(add(tablePtr, and(shr( 6, input), 0x3F)))))\\n               resultPtr := add(resultPtr, 1)\\n               mstore(resultPtr, shl(248, mload(add(tablePtr, and(        input,  0x3F)))))\\n               resultPtr := add(resultPtr, 1)\\n            }\\n            \\n            // padding with '='\\n            switch mod(mload(data), 3)\\n            case 1 { mstore(sub(resultPtr, 2), shl(240, 0x3d3d)) }\\n            case 2 { mstore(sub(resultPtr, 1), shl(248, 0x3d)) }\\n        }\\n        \\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x0c8ad17afea99676d4dbab1857f52a7660b67602a79d03abd0a4c742074bbeb3\",\"license\":\"MIT\"},\"contracts/SharedNFTLogic.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\nimport {Strings} from \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\nimport {Base64} from \\\"base64-sol/base64.sol\\\";\\n\\ncontract SharedNFTLogic {\\n    function base64Encode(bytes memory args)\\n        public\\n        pure\\n        returns (string memory)\\n    {\\n        return Base64.encode(args);\\n    }\\n\\n    function numberToString(uint256 value) public pure returns (string memory) {\\n        return Strings.toString(value);\\n    }\\n\\n    function createMetadataEdition(\\n        string memory name,\\n        string memory description,\\n        string memory imageUrl,\\n        string memory animationUrl,\\n        uint256 tokenOfEdition,\\n        uint256 editionSize\\n    ) external pure returns (string memory) {\\n        string memory _tokenMediaData = tokenMediaData(\\n            imageUrl,\\n            animationUrl,\\n            tokenOfEdition\\n        );\\n        bytes memory json = createMetadataJSON( \\n            name,\\n            description,\\n            _tokenMediaData,\\n            tokenOfEdition,\\n            editionSize\\n        );\\n        return encodeMetadataJSON(json);\\n    }\\n\\n    function createMetadataJSON(\\n        string memory name,\\n        string memory description,\\n        string memory mediaData,\\n        uint256 tokenOfEdition,\\n        uint256 editionSize\\n    ) public pure returns (bytes memory) {\\n        return\\n            abi.encodePacked(\\n                '{\\\"name\\\": \\\"',\\n                name,\\n                \\\" \\\",\\n                Strings.toString(tokenOfEdition),\\n                \\\"/\\\",\\n                Strings.toString(editionSize),\\n                '\\\", \\\"',\\n                'description\\\": \\\"',\\n                description,\\n                '\\\", \\\"',\\n                mediaData,\\n                'properties\\\": {\\\"number\\\": ',\\n                Strings.toString(tokenOfEdition),\\n                ', \\\"name\\\": \\\"',\\n                name,\\n                '\\\"}}'\\n            );\\n    }\\n\\n    function encodeMetadataJSON(bytes memory json)\\n        public\\n        pure\\n        returns (string memory)\\n    {\\n        return\\n            string(\\n                abi.encodePacked(\\n                    \\\"data:application/json;base64,\\\",\\n                    base64Encode(json)\\n                )\\n            );\\n    }\\n\\n    function tokenMediaData(\\n        string memory imageUrl,\\n        string memory animationUrl,\\n        uint256 tokenOfEdition\\n    ) public pure returns (string memory) {\\n        bool hasImage = bytes(imageUrl).length > 0;\\n        bool hasAnimation = bytes(animationUrl).length > 0;\\n        if (hasImage && hasAnimation) {\\n            return\\n                string(\\n                    abi.encodePacked(\\n                        'image\\\": \\\"',\\n                        imageUrl,\\n                        \\\"?id=\\\",\\n                        numberToString(tokenOfEdition),\\n                        '\\\", \\\"animation_url\\\": \\\"',\\n                        animationUrl,\\n                        \\\"?id=\\\",\\n                        numberToString(tokenOfEdition),\\n                        '\\\", \\\"'\\n                    )\\n                );\\n        }\\n        if (hasImage) {\\n            return\\n                string(\\n                    abi.encodePacked(\\n                        'image\\\": \\\"',\\n                        imageUrl,\\n                        \\\"?id=\\\",\\n                        numberToString(tokenOfEdition),\\n                        '\\\", \\\"'\\n                    )\\n                );\\n        }\\n        if (hasAnimation) {\\n            return\\n                string(\\n                    abi.encodePacked(\\n                        'animation_url\\\": \\\"',\\n                        animationUrl,\\n                        \\\"?id=\\\",\\n                        numberToString(tokenOfEdition),\\n                        '\\\", \\\"'\\n                    )\\n                );\\n        }\\n\\n        return \\\"\\\";\\n    }\\n}\\n\",\"keccak256\":\"0x87fa637d118bf50b4313982dcce2d4786b64d0e53ffb1df400d15285aa598395\",\"license\":\"GPL-3.0\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50610c9d806100206000396000f3fe608060405234801561001057600080fd5b50600436106100625760003560e01c8063170dc6601461006757806358464f3014610090578063d01fde8c146100a3578063d5fb1b19146100b6578063df30dba0146100c9578063eb111ab6146100dc575b600080fd5b61007a61007536600461078a565b6100ef565b6040516100879190610afb565b60405180910390f35b61007a61009e366004610685565b610100565b61007a6100b136600461057f565b610151565b61007a6100c436600461057f565b610182565b61007a6100d73660046105c7565b61018d565b61007a6100ea36600461071e565b6101c5565b60606100fa8261027e565b92915050565b60608561010c8461027e565b6101158461027e565b87876101208861027e565b8b604051602001610137979695949392919061090c565b604051602081830303815290604052905095945050505050565b606061015c82610182565b60405160200161016c9190610a48565b6040516020818303038152906040529050919050565b60606100fa82610383565b6060600061019c8686866101c5565b905060006101ad8989848888610100565b90506101b881610151565b9998505050505050505050565b825182516060911580159115159082906101dc5750805b1561022057856101eb856100ef565b866101f5876100ef565b6040516020016102089493929190610851565b60405160208183030381529060405292505050610277565b81156102415785610230856100ef565b6040516020016102089291906107eb565b80156102625784610251856100ef565b604051602001610208929190610a8d565b60405180602001604052806000815250925050505b9392505050565b6060816102a25750506040805180820190915260018152600360fc1b602082015290565b8160005b81156102cc57806102b681610ba0565b91506102c59050600a83610b26565b91506102a6565b6000816001600160401b038111156102e6576102e6610c11565b6040519080825280601f01601f191660200182016040528015610310576020820181803683370190505b5090505b841561037b57610325600183610b59565b9150610332600a86610bbb565b61033d906030610b0e565b60f81b81838151811061035257610352610bfb565b60200101906001600160f81b031916908160001a905350610374600a86610b26565b9450610314565b949350505050565b60608151600014156103a357505060408051602081019091526000815290565b6000604051806060016040528060408152602001610c2860409139905060006003845160026103d29190610b0e565b6103dc9190610b26565b6103e7906004610b3a565b905060006103f6826020610b0e565b6001600160401b0381111561040d5761040d610c11565b6040519080825280601f01601f191660200182016040528015610437576020820181803683370190505b509050818152600183018586518101602084015b818310156104a55760039283018051603f601282901c811687015160f890811b8552600c83901c8216880151811b6001860152600683901c8216880151811b60028601529116860151901b9382019390935260040161044b565b6003895106600181146104bf57600281146104d0576104dc565b613d3d60f01b6001198301526104dc565b603d60f81b6000198301525b509398975050505050505050565b60006001600160401b038084111561050457610504610c11565b604051601f8501601f19908116603f0116810190828211818310171561052c5761052c610c11565b8160405280935085815286868601111561054557600080fd5b858560208301376000602087830101525050509392505050565b600082601f83011261057057600080fd5b610277838335602085016104ea565b60006020828403121561059157600080fd5b81356001600160401b038111156105a757600080fd5b8201601f810184136105b857600080fd5b61037b848235602084016104ea565b60008060008060008060c087890312156105e057600080fd5b86356001600160401b03808211156105f757600080fd5b6106038a838b0161055f565b9750602089013591508082111561061957600080fd5b6106258a838b0161055f565b9650604089013591508082111561063b57600080fd5b6106478a838b0161055f565b9550606089013591508082111561065d57600080fd5b5061066a89828a0161055f565b9350506080870135915060a087013590509295509295509295565b600080600080600060a0868803121561069d57600080fd5b85356001600160401b03808211156106b457600080fd5b6106c089838a0161055f565b965060208801359150808211156106d657600080fd5b6106e289838a0161055f565b955060408801359150808211156106f857600080fd5b506107058882890161055f565b9598949750949560608101359550608001359392505050565b60008060006060848603121561073357600080fd5b83356001600160401b038082111561074a57600080fd5b6107568783880161055f565b9450602086013591508082111561076c57600080fd5b506107798682870161055f565b925050604084013590509250925092565b60006020828403121561079c57600080fd5b5035919050565b600081518084526107bb816020860160208601610b70565b601f01601f19169290920160200192915050565b600081516107e1818560208601610b70565b9290920192915050565b6834b6b0b3b2911d101160b91b81528251600090610810816009850160208801610b70565b633f69643d60e01b600991840191820152835161083481600d840160208801610b70565b631116101160e11b600d9290910191820152601101949350505050565b6834b6b0b3b2911d101160b91b81528451600090610876816009850160208a01610b70565b8083019050633f69643d60e01b806009830152865161089c81600d850160208b01610b70565b741116101130b734b6b0ba34b7b72fbab936111d101160591b600d939091019283015285516108d2816022850160208a01610b70565b602292019182015283516108ed816026840160208801610b70565b631116101160e11b60269290910191820152602a019695505050505050565b693d913730b6b2911d101160b11b8152875160009061093281600a850160208d01610b70565b600160fd1b600a91840191820152885161095381600b840160208d01610b70565b602f60f81b600b9290910191820152875161097581600c840160208c01610b70565b631116101160e11b600c92909101918201526e3232b9b1b934b83a34b7b7111d101160891b601082015286516109b281601f840160208b01610b70565b610a39610a2a610a24610a0d610a076109e36109dd601f888a0101631116101160e11b815260040190565b8d6107cf565b770383937b832b93a34b2b9911d103d91373ab6b132b9111d160451b815260180190565b8a6107cf565b6a1610113730b6b2911d101160a91b8152600b0190565b876107cf565b62227d7d60e81b815260030190565b9b9a5050505050505050505050565b7f646174613a6170706c69636174696f6e2f6a736f6e3b6261736536342c000000815260008251610a8081601d850160208701610b70565b91909101601d0192915050565b7030b734b6b0ba34b7b72fbab936111d101160791b81528251600090610aba816011850160208801610b70565b633f69643d60e01b6011918401918201528351610ade816015840160208801610b70565b631116101160e11b60159290910191820152601901949350505050565b60208152600061027760208301846107a3565b60008219821115610b2157610b21610bcf565b500190565b600082610b3557610b35610be5565b500490565b6000816000190483118215151615610b5457610b54610bcf565b500290565b600082821015610b6b57610b6b610bcf565b500390565b60005b83811015610b8b578181015183820152602001610b73565b83811115610b9a576000848401525b50505050565b6000600019821415610bb457610bb4610bcf565b5060010190565b600082610bca57610bca610be5565b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fdfe4142434445464748494a4b4c4d4e4f505152535455565758595a6162636465666768696a6b6c6d6e6f707172737475767778797a303132333435363738392b2fa2646970667358221220cd6377be69b82b0847c44da2bb9cce91f9559550fe72b4a94be791ffed4f378e64736f6c63430008060033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100625760003560e01c8063170dc6601461006757806358464f3014610090578063d01fde8c146100a3578063d5fb1b19146100b6578063df30dba0146100c9578063eb111ab6146100dc575b600080fd5b61007a61007536600461078a565b6100ef565b6040516100879190610afb565b60405180910390f35b61007a61009e366004610685565b610100565b61007a6100b136600461057f565b610151565b61007a6100c436600461057f565b610182565b61007a6100d73660046105c7565b61018d565b61007a6100ea36600461071e565b6101c5565b60606100fa8261027e565b92915050565b60608561010c8461027e565b6101158461027e565b87876101208861027e565b8b604051602001610137979695949392919061090c565b604051602081830303815290604052905095945050505050565b606061015c82610182565b60405160200161016c9190610a48565b6040516020818303038152906040529050919050565b60606100fa82610383565b6060600061019c8686866101c5565b905060006101ad8989848888610100565b90506101b881610151565b9998505050505050505050565b825182516060911580159115159082906101dc5750805b1561022057856101eb856100ef565b866101f5876100ef565b6040516020016102089493929190610851565b60405160208183030381529060405292505050610277565b81156102415785610230856100ef565b6040516020016102089291906107eb565b80156102625784610251856100ef565b604051602001610208929190610a8d565b60405180602001604052806000815250925050505b9392505050565b6060816102a25750506040805180820190915260018152600360fc1b602082015290565b8160005b81156102cc57806102b681610ba0565b91506102c59050600a83610b26565b91506102a6565b6000816001600160401b038111156102e6576102e6610c11565b6040519080825280601f01601f191660200182016040528015610310576020820181803683370190505b5090505b841561037b57610325600183610b59565b9150610332600a86610bbb565b61033d906030610b0e565b60f81b81838151811061035257610352610bfb565b60200101906001600160f81b031916908160001a905350610374600a86610b26565b9450610314565b949350505050565b60608151600014156103a357505060408051602081019091526000815290565b6000604051806060016040528060408152602001610c2860409139905060006003845160026103d29190610b0e565b6103dc9190610b26565b6103e7906004610b3a565b905060006103f6826020610b0e565b6001600160401b0381111561040d5761040d610c11565b6040519080825280601f01601f191660200182016040528015610437576020820181803683370190505b509050818152600183018586518101602084015b818310156104a55760039283018051603f601282901c811687015160f890811b8552600c83901c8216880151811b6001860152600683901c8216880151811b60028601529116860151901b9382019390935260040161044b565b6003895106600181146104bf57600281146104d0576104dc565b613d3d60f01b6001198301526104dc565b603d60f81b6000198301525b509398975050505050505050565b60006001600160401b038084111561050457610504610c11565b604051601f8501601f19908116603f0116810190828211818310171561052c5761052c610c11565b8160405280935085815286868601111561054557600080fd5b858560208301376000602087830101525050509392505050565b600082601f83011261057057600080fd5b610277838335602085016104ea565b60006020828403121561059157600080fd5b81356001600160401b038111156105a757600080fd5b8201601f810184136105b857600080fd5b61037b848235602084016104ea565b60008060008060008060c087890312156105e057600080fd5b86356001600160401b03808211156105f757600080fd5b6106038a838b0161055f565b9750602089013591508082111561061957600080fd5b6106258a838b0161055f565b9650604089013591508082111561063b57600080fd5b6106478a838b0161055f565b9550606089013591508082111561065d57600080fd5b5061066a89828a0161055f565b9350506080870135915060a087013590509295509295509295565b600080600080600060a0868803121561069d57600080fd5b85356001600160401b03808211156106b457600080fd5b6106c089838a0161055f565b965060208801359150808211156106d657600080fd5b6106e289838a0161055f565b955060408801359150808211156106f857600080fd5b506107058882890161055f565b9598949750949560608101359550608001359392505050565b60008060006060848603121561073357600080fd5b83356001600160401b038082111561074a57600080fd5b6107568783880161055f565b9450602086013591508082111561076c57600080fd5b506107798682870161055f565b925050604084013590509250925092565b60006020828403121561079c57600080fd5b5035919050565b600081518084526107bb816020860160208601610b70565b601f01601f19169290920160200192915050565b600081516107e1818560208601610b70565b9290920192915050565b6834b6b0b3b2911d101160b91b81528251600090610810816009850160208801610b70565b633f69643d60e01b600991840191820152835161083481600d840160208801610b70565b631116101160e11b600d9290910191820152601101949350505050565b6834b6b0b3b2911d101160b91b81528451600090610876816009850160208a01610b70565b8083019050633f69643d60e01b806009830152865161089c81600d850160208b01610b70565b741116101130b734b6b0ba34b7b72fbab936111d101160591b600d939091019283015285516108d2816022850160208a01610b70565b602292019182015283516108ed816026840160208801610b70565b631116101160e11b60269290910191820152602a019695505050505050565b693d913730b6b2911d101160b11b8152875160009061093281600a850160208d01610b70565b600160fd1b600a91840191820152885161095381600b840160208d01610b70565b602f60f81b600b9290910191820152875161097581600c840160208c01610b70565b631116101160e11b600c92909101918201526e3232b9b1b934b83a34b7b7111d101160891b601082015286516109b281601f840160208b01610b70565b610a39610a2a610a24610a0d610a076109e36109dd601f888a0101631116101160e11b815260040190565b8d6107cf565b770383937b832b93a34b2b9911d103d91373ab6b132b9111d160451b815260180190565b8a6107cf565b6a1610113730b6b2911d101160a91b8152600b0190565b876107cf565b62227d7d60e81b815260030190565b9b9a5050505050505050505050565b7f646174613a6170706c69636174696f6e2f6a736f6e3b6261736536342c000000815260008251610a8081601d850160208701610b70565b91909101601d0192915050565b7030b734b6b0ba34b7b72fbab936111d101160791b81528251600090610aba816011850160208801610b70565b633f69643d60e01b6011918401918201528351610ade816015840160208801610b70565b631116101160e11b60159290910191820152601901949350505050565b60208152600061027760208301846107a3565b60008219821115610b2157610b21610bcf565b500190565b600082610b3557610b35610be5565b500490565b6000816000190483118215151615610b5457610b54610bcf565b500290565b600082821015610b6b57610b6b610bcf565b500390565b60005b83811015610b8b578181015183820152602001610b73565b83811115610b9a576000848401525b50505050565b6000600019821415610bb457610bb4610bcf565b5060010190565b600082610bca57610bca610be5565b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fdfe4142434445464748494a4b4c4d4e4f505152535455565758595a6162636465666768696a6b6c6d6e6f707172737475767778797a303132333435363738392b2fa2646970667358221220cd6377be69b82b0847c44da2bb9cce91f9559550fe72b4a94be791ffed4f378e64736f6c63430008060033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}